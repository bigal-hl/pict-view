{"version":3,"sources":["pict-view.compatible.min.js","node_modules/browser-pack/_prelude.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase-Preinit.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase.js","source/Pict-View.js"],"names":["_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","writable","configurable","defineProperty","_setPrototypeOf","o","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","call","_typeof","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","_classCallCheck","instance","Constructor","_defineProperties","target","props","i","length","descriptor","enumerable","_toPropertyKey","key","_createClass","protoProps","staticProps","_defineProperty","obj","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","Number","iterator","f","exports","module","define","amd","window","global","PictView","r","n","t","c","require","u","a","Error","code","FableCoreServiceProviderBase","pOptions","pServiceHash","fable","options","serviceType","UUID","concat","Math","floor","random","Hash","pFable","FableServiceProviderBase","isFable","getUUID","log","servicesMap","services","CoreServiceProviderBase","libFableServiceBase","defaultPictViewSettings","DefaultRenderable","DefaultDestinationAddress","DefaultTemplateRecordAddress","ViewIdentifier","AutoInitialize","AutoInitializeOrdinal","AutoRender","AutoRenderOrdinal","SolveWithAppSolve","SolveOrdinal","Templates","DefaultTemplates","Renderables","Manifests","_libFableServiceBase","_super","_this","tmpOptions","assign","JSON","parse","stringify","pict","AppData","tmpTemplate","hasOwnProperty","Source","TemplateProvider","addTemplate","Template","error","tmpDefaultTemplate","addDefaultTemplate","Prefix","Postfix","renderables","tmpRenderable","RenderableHash","info","fCallback","onBeforeSolve","onSolve","_this2","tmpAnticipate","serviceManager","instantiateServiceProviderWithoutRegistration","anticipate","onBeforeSolveAsync","onSolveAsync","onAfterSolve","wait","pError","onBeforeInitialize","onInitialize","onAfterInitialize","fCallBack","_this3","onBeforeInitializeAsync","onInitializeAsync","onAfterInitializeAsync","pRenderable","pRenderDestinationAddress","pData","onBeforeRender","pTemplateDataAddress","tmpRenderableHash","tmpRenderDestinationAddress","ContentDestinationAddress","tmpDataAddress","RecordAddress","tmpData","DataProvider","getDataByAddress","tmpContent","parseTemplateByHash","TemplateHash","ContentAssignment","assignContent","onAfterRender","_this4","pContent"],"mappings":"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","file":"pict-view.compatible.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.PictView = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/**\n* Fable Core Pre-initialization Service Base\n*\n* For a couple services, we need to be able to instantiate them before the Fable object is fully initialized.\n* This is a base class for those services.\n*\n* @author <steven@velozo.com>\n*/\n\nclass FableCoreServiceProviderBase\n{\n\tconstructor(pOptions, pServiceHash)\n\t{\n\t\tthis.fable = false;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions : {};\n\n\t\tthis.serviceType = 'Unknown';\n\n\t\t// The hash will be a non-standard UUID ... the UUID service uses this base class!\n\t\tthis.UUID = `CORESVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`;\n\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\t}\n\n\n\tstatic isFableService = true;\n\n\t// After fable is initialized, it would be expected to be wired in as a normal service.\n\tconnectFable(pFable)\n\t{\n\t\tthis.fable = pFable;\n\n\t\treturn true;\n\t}\n}\n\nmodule.exports = FableCoreServiceProviderBase;\n\n},{}],2:[function(require,module,exports){\n/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tthis.fable = pFable;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t: ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t: {};\n\n\t\tthis.serviceType = 'Unknown';\n\n\t\tif (typeof(pFable.getUUID) == 'function')\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.UUID = `NoFABLESVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\n\t\t// Pull back a few things\n\t\tthis.log = this.fable.log;\n\t\tthis.servicesMap = this.fable.servicesMap;\n\t\tthis.services = this.fable.services;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\nmodule.exports.CoreServiceProviderBase = require('./Fable-ServiceProviderBase-Preinit.js');\n},{\"./Fable-ServiceProviderBase-Preinit.js\":1}],3:[function(require,module,exports){\nconst libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tSolveWithAppSolve: true,\n\t\tSolveOrdinal: 0,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\nclass PictView extends libFableServiceBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t// Convenience and consistency naming\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.fable.AppData;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!tmpTemplate.hasOwnProperty('Hash') || !tmpTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.fable.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!tmpDefaultTemplate.hasOwnProperty('Postfix') || !tmpDefaultTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.fable.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\n\t\t\tif (!tmpRenderable.hasOwnProperty('RenderableHash') || !tmpRenderable.hasOwnProperty('TemplateHash'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable ${i} in the options array.`, tmpRenderable);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t\t}\n\t\t}\n\t}\n\n    onBeforeSolve()\n    {\n        this.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n        return true;\n    }\n    onBeforeSolveAsync(fCallback)\n    {\n        this.onBeforeSolve();\n        return fCallback();\n    }\n\n    onSolve()\n    {\n        this.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n        return true;\n    }\n    onSolveAsync(fCallback)\n    {\n        this.onSolve();\n        return fCallback();\n    }\n\n    // TODO: do we need an asynchronous version of this?\n    solve()\n    {\n        this.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`)\n        return true;\n    }\n\n    solveAsync(fCallback)\n    {\n        let tmpAnticipate = this.fable.serviceManager.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n        tmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n        tmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n        tmpAnticipate.anticipate(this.onAfterSolve.bind(this));\n\n        tmpAnticipate.wait(\n            (pError) =>\n            {\n                this.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n                return fCallback(pError);\n            });\n    }\n\n    onAfterSolve()\n    {\n        this.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n        return true;\n    }\n    onAfterSolveAsync(fCallback)\n    {\n        this.onAfterSolve();\n        return fCallback();\n    }\n\n\tonBeforeInitialize()\n\t{\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\treturn true;\n\t}\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\tonInitialize()\n\t{\n\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\treturn true;\n\t}\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\tinitialize()\n\t{\n\t\tthis.onBeforeInitialize();\n\t\tthis.onInitialize();\n\t\tthis.onAfterInitialize();\n\t\treturn true;\n\t}\n\tinitializeAsync(fCallBack)\n\t{\n\t\tlet tmpAnticipate = this.fable.serviceManager.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\n\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\treturn fCallBack();\n\t\t\t})\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\treturn true;\n\t}\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pData)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\treturn true;\n\t}\n\tonBeforeRenderAsync(pRenderable, pRenderDestinationAddress, pData, fCallback)\n\t{\n\t\tthis.onBeforeRender(pRenderable, pRenderDestinationAddress, pData);\n\t\treturn fCallback();\n\t}\n\n\trender(pRenderable, pRenderDestinationAddress, pTemplateDataAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t(typeof (tmpRenderable.RecordAddress) === 'string') ? tmpRenderable.RecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\tlet tmpData = (typeof (tmpDataAddress) === 'string') ? this.fable.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.fable.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData)\n\n\t\t// Assign the content to the destination address\n\t\tthis.fable.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData, tmpContent)\n\t}\n\trenderAsync(pRenderable, pRenderDestinationAddress, pTemplateDataAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn fCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t(typeof (tmpRenderable.RecordAddress) === 'string') ? tmpRenderable.RecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\tlet tmpData = (typeof (tmpDataAddress) === 'string') ? this.fable.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\n\t\t// Render the template (asynchronously)\n\t\tthis.fable.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData,\n\t\t\t(pError, pContent) =>\n\t\t\t{\n\t\t\t\tif (pError)\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderable}) because it did not parse the template.`, pError);\n\t\t\t\t\treturn fCallback(pError);\n\t\t\t\t}\n\n\t\t\t\t// Assign the content to the destination address\n\t\t\t\tthis.fable.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\n\t\t\t\t// Execute the developer-overridable post-render behavior\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData, pContent)\n\n\t\t\t\treturn fCallback(null, pContent);\n\t\t\t});\n\t}\n\n\tonAfterRender()\n\t{\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\treturn true;\n\t}\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\tthis.onAfterRender();\n\t\treturn fCallback();\n\t}\n}\n\nmodule.exports = PictView;\n},{\"fable-serviceproviderbase\":2}]},{},[3])(3)\n});\n\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n* Fable Core Pre-initialization Service Base\n*\n* For a couple services, we need to be able to instantiate them before the Fable object is fully initialized.\n* This is a base class for those services.\n*\n* @author <steven@velozo.com>\n*/\n\nclass FableCoreServiceProviderBase\n{\n\tconstructor(pOptions, pServiceHash)\n\t{\n\t\tthis.fable = false;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions : {};\n\n\t\tthis.serviceType = 'Unknown';\n\n\t\t// The hash will be a non-standard UUID ... the UUID service uses this base class!\n\t\tthis.UUID = `CORESVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`;\n\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\t}\n\n\n\tstatic isFableService = true;\n\n\t// After fable is initialized, it would be expected to be wired in as a normal service.\n\tconnectFable(pFable)\n\t{\n\t\tthis.fable = pFable;\n\n\t\treturn true;\n\t}\n}\n\nmodule.exports = FableCoreServiceProviderBase;\n","/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tthis.fable = pFable;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t: ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t: {};\n\n\t\tthis.serviceType = 'Unknown';\n\n\t\tif (typeof(pFable.getUUID) == 'function')\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.UUID = `NoFABLESVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\n\t\t// Pull back a few things\n\t\tthis.log = this.fable.log;\n\t\tthis.servicesMap = this.fable.servicesMap;\n\t\tthis.services = this.fable.services;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\nmodule.exports.CoreServiceProviderBase = require('./Fable-ServiceProviderBase-Preinit.js');","const libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tSolveWithAppSolve: true,\n\t\tSolveOrdinal: 0,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\nclass PictView extends libFableServiceBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t// Convenience and consistency naming\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.fable.AppData;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!tmpTemplate.hasOwnProperty('Hash') || !tmpTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.fable.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!tmpDefaultTemplate.hasOwnProperty('Postfix') || !tmpDefaultTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.fable.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\n\t\t\tif (!tmpRenderable.hasOwnProperty('RenderableHash') || !tmpRenderable.hasOwnProperty('TemplateHash'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable ${i} in the options array.`, tmpRenderable);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t\t}\n\t\t}\n\t}\n\n    onBeforeSolve()\n    {\n        this.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n        return true;\n    }\n    onBeforeSolveAsync(fCallback)\n    {\n        this.onBeforeSolve();\n        return fCallback();\n    }\n\n    onSolve()\n    {\n        this.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n        return true;\n    }\n    onSolveAsync(fCallback)\n    {\n        this.onSolve();\n        return fCallback();\n    }\n\n    // TODO: do we need an asynchronous version of this?\n    solve()\n    {\n        this.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`)\n        return true;\n    }\n\n    solveAsync(fCallback)\n    {\n        let tmpAnticipate = this.fable.serviceManager.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n        tmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n        tmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n        tmpAnticipate.anticipate(this.onAfterSolve.bind(this));\n\n        tmpAnticipate.wait(\n            (pError) =>\n            {\n                this.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n                return fCallback(pError);\n            });\n    }\n\n    onAfterSolve()\n    {\n        this.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n        return true;\n    }\n    onAfterSolveAsync(fCallback)\n    {\n        this.onAfterSolve();\n        return fCallback();\n    }\n\n\tonBeforeInitialize()\n\t{\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\treturn true;\n\t}\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\tonInitialize()\n\t{\n\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\treturn true;\n\t}\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\tinitialize()\n\t{\n\t\tthis.onBeforeInitialize();\n\t\tthis.onInitialize();\n\t\tthis.onAfterInitialize();\n\t\treturn true;\n\t}\n\tinitializeAsync(fCallBack)\n\t{\n\t\tlet tmpAnticipate = this.fable.serviceManager.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\n\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\treturn fCallBack();\n\t\t\t})\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\treturn true;\n\t}\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pData)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\treturn true;\n\t}\n\tonBeforeRenderAsync(pRenderable, pRenderDestinationAddress, pData, fCallback)\n\t{\n\t\tthis.onBeforeRender(pRenderable, pRenderDestinationAddress, pData);\n\t\treturn fCallback();\n\t}\n\n\trender(pRenderable, pRenderDestinationAddress, pTemplateDataAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t(typeof (tmpRenderable.RecordAddress) === 'string') ? tmpRenderable.RecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\tlet tmpData = (typeof (tmpDataAddress) === 'string') ? this.fable.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.fable.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData)\n\n\t\t// Assign the content to the destination address\n\t\tthis.fable.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData, tmpContent)\n\t}\n\trenderAsync(pRenderable, pRenderDestinationAddress, pTemplateDataAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn fCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t(typeof (tmpRenderable.RecordAddress) === 'string') ? tmpRenderable.RecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\tlet tmpData = (typeof (tmpDataAddress) === 'string') ? this.fable.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\n\t\t// Render the template (asynchronously)\n\t\tthis.fable.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData,\n\t\t\t(pError, pContent) =>\n\t\t\t{\n\t\t\t\tif (pError)\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderable}) because it did not parse the template.`, pError);\n\t\t\t\t\treturn fCallback(pError);\n\t\t\t\t}\n\n\t\t\t\t// Assign the content to the destination address\n\t\t\t\tthis.fable.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\n\t\t\t\t// Execute the developer-overridable post-render behavior\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData, pContent)\n\n\t\t\t\treturn fCallback(null, pContent);\n\t\t\t});\n\t}\n\n\tonAfterRender()\n\t{\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\treturn true;\n\t}\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\tthis.onAfterRender();\n\t\treturn fCallback();\n\t}\n}\n\nmodule.exports = PictView;"]}