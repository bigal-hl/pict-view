{"version":3,"sources":["pict-view.compatible.min.js","node_modules/browser-pack/_prelude.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase.js","source/Pict-View.js"],"names":["_callSuper","t","o","e","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","constructor","apply","_typeof","TypeError","_assertThisInitialized","ReferenceError","Boolean","prototype","valueOf","call","Object","setPrototypeOf","getPrototypeOf","bind","__proto__","_inherits","create","value","writable","configurable","defineProperty","_setPrototypeOf","_classCallCheck","a","n","_defineProperties","r","length","enumerable","_toPropertyKey","key","_createClass","_defineProperty","i","_toPrimitive","Symbol","toPrimitive","String","Number","iterator","f","exports","module","define","amd","window","global","self","this","PictView","c","require","u","Error","code","p","FableServiceProviderBase","pFable","pOptions","pServiceHash","isFable","connectFable","fable","UUID","getUUID","options","concat","Math","floor","random","serviceType","Hash","tmpErrorMessage","console","log","Logging","services","servicesMap","CoreServiceProviderBase","libFableServiceBase","defaultPictViewSettings","DefaultRenderable","DefaultDestinationAddress","DefaultTemplateRecordAddress","ViewIdentifier","AutoInitialize","AutoInitializeOrdinal","AutoRender","AutoRenderOrdinal","AutoSolveWithApp","AutoSolveOrdinal","CSSHash","CSS","CSSProvider","CSSPriority","Templates","DefaultTemplates","Renderables","Manifests","_libFableServiceBase","_this","assign","JSON","parse","stringify","pict","AppData","initializeTimestamp","lastSolvedTimestamp","lastRenderedTimestamp","lastMarshalFromViewTimestamp","lastMarshalToViewTimestamp","tmpTemplate","Source","TemplateProvider","addTemplate","Template","error","tmpDefaultTemplate","addDefaultTemplate","Prefix","Postfix","tmpCSSHash","tmpCSSProvider","CSSMap","addCSS","renderables","tmpRenderable","addRenderable","pRenderableHash","pTemplateHash","pDefaultTemplateRecordAddress","pDefaultDestinationAddress","pRenderMethod","RenderableHash","TemplateHash","ContentDestinationAddress","RenderMethod","LogNoisiness","trace","fCallback","onBeforeInitialize","onInitialize","LogControlFlow","warn","onAfterInitialize","getTimeStamp","_this2","tmpAnticipate","instantiateServiceProviderWithoutRegistration","info","anticipate","onBeforeInitializeAsync","onInitializeAsync","onAfterInitializeAsync","wait","pError","pRenderable","pRenderDestinationAddress","pRecord","pTemplateRecordAddress","tmpRenderableHash","tmpRecordAddress","tmpRecord","tmpRenderDestinationAddress","DataProvider","getDataByAddress","undefined","onBeforeRender","tmpContent","parseTemplateByHash","ContentAssignment","appendContent","prependContent","getElement","assignContent","onAfterRender","_this3","tmpCallback","Name","newAnticipate","fOnBeforeRenderCallback","onBeforeRenderAsync","fAsyncTemplateCallback","pContent","fOnAfterRenderCallback","onAfterRenderAsync","renderAsync","onBeforeSolve","onSolve","onAfterSolve","_this4","onBeforeSolveAsync","onSolveAsync","onAfterSolveAsync","onBeforeMarshalFromView","onMarshalFromView","onAfterMarshalFromView","_this5","onBeforeMarshalFromViewAsync","onMarshalFromViewAsync","onAfterMarshalFromViewAsync","onBeforeMarshalToView","onMarshalToView","onAfterMarshalToView","_this6","onBeforeMarshalToViewAsync","onMarshalToViewAsync","onAfterMarshalToViewAsync","get"],"mappings":"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","file":"pict-view.compatible.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.PictView = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;\n},{}],2:[function(require,module,exports){\n\nconst libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// After the App initializes, initialize will be called as soon as it's added.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called as soon as it's added.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSSHash: false,\n\t\tCSS: false,\n\t\tCSSProvider: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\n/** @typedef {(error?: Error) => void} ErrorCallback */\n/** @typedef {number | boolean} PictTimestamp */\n\n/**\n * @typedef {Object} Renderable\n *\n * @property {string} RenderableHash - A unique hash for the renderable.\n * @property {string} TemplateHash] - The hash of the template to use for rendering this renderable.\n * @property {string} [DefaultTemplateRecordAddress] - The default address for resolving the data record for this renderable.\n * @property {string} [ContentDestinationAddress] - The default address (DOM CSS selector) for rendering the content of this renderable.\n * @property {string} [RenderMethod] - The method to use when rendering the renderable ('replace', 'append', 'prepend', 'append_once').\n */\n\n/**\n * Represents a view in the Pict ecosystem.\n */\nclass PictView extends libFableServiceBase\n{\n\t/**\n\t * @param {any} pFable - The Fable object that this service is attached to.\n\t * @param {any} [pOptions] - (optional) The options for this service.\n\t * @param {string} [pServiceHash] - (optional) The hash of the service.\n\t */\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\t//FIXME: add types to fable and ancillaries\n\t\t/** @type {any} */\n\t\tthis.fable;\n\t\t/** @type {any} */\n\t\tthis.options;\n\t\t/** @type {String} */\n\t\tthis.UUID;\n\t\t/** @type {String} */\n\t\tthis.Hash;\n\t\t/** @type {any} */\n\t\tthis.log;\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t// Convenience and consistency naming\n\t\t/** @type {import('pict') & { log: any, instantiateServiceProviderWithoutRegistration: (hash: String) => any }} */\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.pict.AppData;\n\n\t\t/** @type {PictTimestamp} */\n\t\tthis.initializeTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastSolvedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastRenderedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalFromViewTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalToViewTimestamp = false;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!('Hash' in tmpTemplate) || !('Template' in tmpTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!('Postfix' in tmpDefaultTemplate) || !('Template' in tmpDefaultTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load the CSS if it's available\n\t\tif (this.options.CSS)\n\t\t{\n\t\t\tlet tmpCSSHash = this.options.CSSHash ? this.options.CSSHash : `View-${this.options.ViewIdentifier}`;\n\t\t\tlet tmpCSSProvider = this.options.CSSProvider ? this.options.CSSProvider : tmpCSSHash;\n\t\t\tthis.pict.CSSMap.addCSS(tmpCSSHash, this.options.CSS, tmpCSSProvider, this.options.CSSPriority);\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\t/** @type {Object<String, Renderable>} */\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\t/** @type {Renderable} */\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\t\t\tthis.addRenderable(tmpRenderable);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a renderable to the view.\n\t *\n\t * @param {string | Renderable} pRenderableHash - The hash of the renderable, or a renderable object.\n\t * @param {string} [pTemplateHash] - (optional) The hash of the template for the renderable.\n\t * @param {string} [pDefaultTemplateRecordAddress] - (optional) The default data address for the template.\n\t * @param {string} [pDefaultDestinationAddress] - (optional) The default destination address for the renderable.\n\t * @param {string} [pRenderMethod] - (optional) The method to use when rendering the renderable (ex. 'replace').\n\t */\n\taddRenderable(pRenderableHash, pTemplateHash, pDefaultTemplateRecordAddress, pDefaultDestinationAddress, pRenderMethod)\n\t{\n\t\t/** @type {Renderable} */\n\t\tlet tmpRenderable;\n\n\t\tif (typeof(pRenderableHash) == 'object')\n\t\t{\n\t\t\t// The developer passed in the renderable as an object.\n\t\t\t// Use theirs instead!\n\t\t\ttmpRenderable = pRenderableHash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpRenderMethod = (typeof(pRenderMethod) !== 'string') ? pRenderMethod : 'replace';\n\t\t\ttmpRenderable = (\n\t\t\t\t{\n\t\t\t\t\tRenderableHash: pRenderableHash,\n\t\t\t\t\tTemplateHash: pTemplateHash,\n\t\t\t\t\tDefaultTemplateRecordAddress: pDefaultTemplateRecordAddress,\n\t\t\t\t\tContentDestinationAddress: pDefaultDestinationAddress,\n\t\t\t\t\tRenderMethod: tmpRenderMethod\n\t\t\t\t});\n\t\t}\n\n\t\tif ((typeof(tmpRenderable.RenderableHash) != 'string') || (typeof(tmpRenderable.TemplateHash) != 'string'))\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`, tmpRenderable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${tmpRenderable.RenderableHash}] pointed to template ${tmpRenderable.TemplateHash}.`);\n\t\t\t}\n\n\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Code Section: Initialization                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized.\n\t */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized.\n\t */\n\tonInitialize()\n\t{\n\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view initialization.\n\t */\n\tinitialize()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\t\t\tthis.onAfterInitialize();\n\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Performs view initialization (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tinitializeAsync(fCallback)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initializeAsync:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallback();\n\t\t\t\t})\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Render                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered.\n\t *\n\t * @param {any} [pRenderable] - The renderable that will be rendered.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {any} [pRecord] - The record (data) that will be used to render the renderable.\n\t */\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pRecord)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string} [pRenderable] - The hash of the renderable to render.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t */\n\trender(pRenderable, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] render:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Render of Renderable[${tmpRenderableHash}] to Destination [${tmpRenderDestinationAddress}]...`);\n\t\t}\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord, null, [this])\n\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${tmpContent.length} to Destination [${tmpRenderDestinationAddress}] using render method [${tmpRenderable.RenderMethod}].`);\n\t\t}\n\n\t\t// Assign the content to the destination address\n\t\tswitch(tmpRenderable.RenderMethod)\n\t\t{\n\t\t\tcase 'append':\n\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'prepend':\n\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'append_once':\n\t\t\t\t// Try to find the content in the destination address\n\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t{\n\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'replace':\n\t\t\t\t// TODO: Should this be the default?\n\t\t\tdefault:\n\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent)\n\n\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string | ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string | ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string | ErrorCallback} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t * @param {ErrorCallback} [fCallback] - The callback to call when the async operation is complete.\n\t */\n\trenderAsync(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderableHash) === 'string') ? pRenderableHash :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\n\t\t// Allow the callback to be passed in as the last parameter no matter what\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback :\n\t\t\t\t\t\t\t(typeof(pTemplateRecordAddress) === 'function') ? pTemplateRecordAddress :\n\t\t\t\t\t\t\t(typeof(pRenderDestinationAddress) === 'function') ? pRenderDestinationAddress :\n\t\t\t\t\t\t\t(typeof(pRenderableHash) === 'function') ? pRenderableHash :\n\t\t\t\t\t\t\tfalse;\n\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) => \n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync Auto Callback Error: ${pError}`, pError)\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`);\n\t\t\treturn tmpCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`);\n\t\t\treturn tmpCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not have a valid destination address.`);\n\t\t\treturn tmpCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] renderAsync:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Asynchronous Render (callback-style)...`);\n\t\t}\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnBeforeRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\t\t\t\tthis.onBeforeRenderAsync(fOnBeforeRenderCallback);\n\t\t\t});\n\n\t\tlet tmpContent;\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fAsyncTemplateCallback) =>\n\t\t\t{\n\t\t\t\t// Render the template (asynchronously)\n\t\t\t\tthis.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord,\n\t\t\t\t\t(pError, pContent) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderableHash}) because it did not parse the template.`, pError);\n\t\t\t\t\t\t\treturn fAsyncTemplateCallback(pError);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttmpContent = pContent;\n\n\t\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${pContent.length} to Destination [${tmpRenderDestinationAddress}] using Async render method ${tmpRenderable.RenderMethod}.`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Assign the content to the destination address\n\t\t\t\t\t\tswitch(tmpRenderable.RenderMethod)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'append':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'prepend':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'append_once':\n\t\t\t\t\t\t\t\t// Try to find the content in the destination address\n\t\t\t\t\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\t\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase 'replace':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Execute the developer-overridable asynchronous post-render behavior\n\t\t\t\t\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\t\treturn fAsyncTemplateCallback();\n\t\t\t\t\t}, [this]);\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnAfterRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent);\n\t\t\t\tthis.onAfterRenderAsync(fOnAfterRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.wait(tmpCallback);\n\t}\n\n\t/**\n\t * Renders the default renderable.\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\trenderDefaultAsync(fCallback)\n\t{\n\t\t// Render the default renderable\n\t\tthis.renderAsync(fCallback);\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered.\n\t *\n\t * @param {any} [pRenderable] - The renderable that was rendered.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable was rendered.\n\t * @param {any} [pRecord] - The record (data) that was used by the renderable.\n\t * @param {string} [pContent] - The content that was rendered.\n\t */\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent)\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Solver                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is solved.\n\t */\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved.\n\t */\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks.\n\t *\n\t * @return {boolean} - True if the view was solved successfully, false otherwise.\n\t */\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeSolve();\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : false;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) => \n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync Auto Callback Error: ${pError}`, pError)\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved.\n\t */\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal From View                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tonBeforeMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view.\n\t */\n\tonMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalFromViewAsync(fCallback)\n\t{\n\n\t\tthis.onMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalFromView();\n\t\tthis.onMarshalFromView();\n\t\tthis.onAfterMarshalFromView();\n\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalFromViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : false;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) => \n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync Auto Callback Error: ${pError}`, pError)\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalFromViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view.\n\t */\n\tonAfterMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal To View                          */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view.\n\t */\n\tonBeforeMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view.\n\t */\n\tonMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data into the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalToView();\n\t\tthis.onMarshalToView();\n\t\tthis.onAfterMarshalToView();\n\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalToViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : false;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) => \n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync Auto Callback Error: ${pError}`, pError)\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalToViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view.\n\t */\n\tonAfterMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/** @return {boolean} - True if the object is a PictView. */\n\tget isPictView()\n\t{\n\t\treturn true;\n\t}\n}\n\nmodule.exports = PictView;\n\n},{\"fable-serviceproviderbase\":1}]},{},[2])(2)\n});\n\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;","\nconst libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// After the App initializes, initialize will be called as soon as it's added.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called as soon as it's added.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSSHash: false,\n\t\tCSS: false,\n\t\tCSSProvider: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\n/** @typedef {(error?: Error) => void} ErrorCallback */\n/** @typedef {number | boolean} PictTimestamp */\n\n/**\n * @typedef {Object} Renderable\n *\n * @property {string} RenderableHash - A unique hash for the renderable.\n * @property {string} TemplateHash] - The hash of the template to use for rendering this renderable.\n * @property {string} [DefaultTemplateRecordAddress] - The default address for resolving the data record for this renderable.\n * @property {string} [ContentDestinationAddress] - The default address (DOM CSS selector) for rendering the content of this renderable.\n * @property {string} [RenderMethod] - The method to use when rendering the renderable ('replace', 'append', 'prepend', 'append_once').\n */\n\n/**\n * Represents a view in the Pict ecosystem.\n */\nclass PictView extends libFableServiceBase\n{\n\t/**\n\t * @param {any} pFable - The Fable object that this service is attached to.\n\t * @param {any} [pOptions] - (optional) The options for this service.\n\t * @param {string} [pServiceHash] - (optional) The hash of the service.\n\t */\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\t//FIXME: add types to fable and ancillaries\n\t\t/** @type {any} */\n\t\tthis.fable;\n\t\t/** @type {any} */\n\t\tthis.options;\n\t\t/** @type {String} */\n\t\tthis.UUID;\n\t\t/** @type {String} */\n\t\tthis.Hash;\n\t\t/** @type {any} */\n\t\tthis.log;\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t// Convenience and consistency naming\n\t\t/** @type {import('pict') & { log: any, instantiateServiceProviderWithoutRegistration: (hash: String) => any }} */\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.pict.AppData;\n\n\t\t/** @type {PictTimestamp} */\n\t\tthis.initializeTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastSolvedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastRenderedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalFromViewTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalToViewTimestamp = false;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!('Hash' in tmpTemplate) || !('Template' in tmpTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!('Postfix' in tmpDefaultTemplate) || !('Template' in tmpDefaultTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load the CSS if it's available\n\t\tif (this.options.CSS)\n\t\t{\n\t\t\tlet tmpCSSHash = this.options.CSSHash ? this.options.CSSHash : `View-${this.options.ViewIdentifier}`;\n\t\t\tlet tmpCSSProvider = this.options.CSSProvider ? this.options.CSSProvider : tmpCSSHash;\n\t\t\tthis.pict.CSSMap.addCSS(tmpCSSHash, this.options.CSS, tmpCSSProvider, this.options.CSSPriority);\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\t/** @type {Object<String, Renderable>} */\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\t/** @type {Renderable} */\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\t\t\tthis.addRenderable(tmpRenderable);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a renderable to the view.\n\t *\n\t * @param {string | Renderable} pRenderableHash - The hash of the renderable, or a renderable object.\n\t * @param {string} [pTemplateHash] - (optional) The hash of the template for the renderable.\n\t * @param {string} [pDefaultTemplateRecordAddress] - (optional) The default data address for the template.\n\t * @param {string} [pDefaultDestinationAddress] - (optional) The default destination address for the renderable.\n\t * @param {string} [pRenderMethod] - (optional) The method to use when rendering the renderable (ex. 'replace').\n\t */\n\taddRenderable(pRenderableHash, pTemplateHash, pDefaultTemplateRecordAddress, pDefaultDestinationAddress, pRenderMethod)\n\t{\n\t\t/** @type {Renderable} */\n\t\tlet tmpRenderable;\n\n\t\tif (typeof(pRenderableHash) == 'object')\n\t\t{\n\t\t\t// The developer passed in the renderable as an object.\n\t\t\t// Use theirs instead!\n\t\t\ttmpRenderable = pRenderableHash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpRenderMethod = (typeof(pRenderMethod) !== 'string') ? pRenderMethod : 'replace';\n\t\t\ttmpRenderable = (\n\t\t\t\t{\n\t\t\t\t\tRenderableHash: pRenderableHash,\n\t\t\t\t\tTemplateHash: pTemplateHash,\n\t\t\t\t\tDefaultTemplateRecordAddress: pDefaultTemplateRecordAddress,\n\t\t\t\t\tContentDestinationAddress: pDefaultDestinationAddress,\n\t\t\t\t\tRenderMethod: tmpRenderMethod\n\t\t\t\t});\n\t\t}\n\n\t\tif ((typeof(tmpRenderable.RenderableHash) != 'string') || (typeof(tmpRenderable.TemplateHash) != 'string'))\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`, tmpRenderable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${tmpRenderable.RenderableHash}] pointed to template ${tmpRenderable.TemplateHash}.`);\n\t\t\t}\n\n\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Code Section: Initialization                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized.\n\t */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized.\n\t */\n\tonInitialize()\n\t{\n\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view initialization.\n\t */\n\tinitialize()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\t\t\tthis.onAfterInitialize();\n\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Performs view initialization (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tinitializeAsync(fCallback)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initializeAsync:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallback();\n\t\t\t\t})\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Render                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered.\n\t *\n\t * @param {any} [pRenderable] - The renderable that will be rendered.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {any} [pRecord] - The record (data) that will be used to render the renderable.\n\t */\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pRecord)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string} [pRenderable] - The hash of the renderable to render.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t */\n\trender(pRenderable, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] render:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Render of Renderable[${tmpRenderableHash}] to Destination [${tmpRenderDestinationAddress}]...`);\n\t\t}\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord, null, [this])\n\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${tmpContent.length} to Destination [${tmpRenderDestinationAddress}] using render method [${tmpRenderable.RenderMethod}].`);\n\t\t}\n\n\t\t// Assign the content to the destination address\n\t\tswitch(tmpRenderable.RenderMethod)\n\t\t{\n\t\t\tcase 'append':\n\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'prepend':\n\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'append_once':\n\t\t\t\t// Try to find the content in the destination address\n\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t{\n\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'replace':\n\t\t\t\t// TODO: Should this be the default?\n\t\t\tdefault:\n\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent)\n\n\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string | ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string | ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string | ErrorCallback} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t * @param {ErrorCallback} [fCallback] - The callback to call when the async operation is complete.\n\t */\n\trenderAsync(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderableHash) === 'string') ? pRenderableHash :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\n\t\t// Allow the callback to be passed in as the last parameter no matter what\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback :\n\t\t\t\t\t\t\t(typeof(pTemplateRecordAddress) === 'function') ? pTemplateRecordAddress :\n\t\t\t\t\t\t\t(typeof(pRenderDestinationAddress) === 'function') ? pRenderDestinationAddress :\n\t\t\t\t\t\t\t(typeof(pRenderableHash) === 'function') ? pRenderableHash :\n\t\t\t\t\t\t\tfalse;\n\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) => \n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync Auto Callback Error: ${pError}`, pError)\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`);\n\t\t\treturn tmpCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`);\n\t\t\treturn tmpCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not have a valid destination address.`);\n\t\t\treturn tmpCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] renderAsync:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Asynchronous Render (callback-style)...`);\n\t\t}\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnBeforeRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\t\t\t\tthis.onBeforeRenderAsync(fOnBeforeRenderCallback);\n\t\t\t});\n\n\t\tlet tmpContent;\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fAsyncTemplateCallback) =>\n\t\t\t{\n\t\t\t\t// Render the template (asynchronously)\n\t\t\t\tthis.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord,\n\t\t\t\t\t(pError, pContent) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderableHash}) because it did not parse the template.`, pError);\n\t\t\t\t\t\t\treturn fAsyncTemplateCallback(pError);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttmpContent = pContent;\n\n\t\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${pContent.length} to Destination [${tmpRenderDestinationAddress}] using Async render method ${tmpRenderable.RenderMethod}.`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Assign the content to the destination address\n\t\t\t\t\t\tswitch(tmpRenderable.RenderMethod)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'append':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'prepend':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'append_once':\n\t\t\t\t\t\t\t\t// Try to find the content in the destination address\n\t\t\t\t\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\t\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase 'replace':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Execute the developer-overridable asynchronous post-render behavior\n\t\t\t\t\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\t\treturn fAsyncTemplateCallback();\n\t\t\t\t\t}, [this]);\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnAfterRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent);\n\t\t\t\tthis.onAfterRenderAsync(fOnAfterRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.wait(tmpCallback);\n\t}\n\n\t/**\n\t * Renders the default renderable.\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\trenderDefaultAsync(fCallback)\n\t{\n\t\t// Render the default renderable\n\t\tthis.renderAsync(fCallback);\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered.\n\t *\n\t * @param {any} [pRenderable] - The renderable that was rendered.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable was rendered.\n\t * @param {any} [pRecord] - The record (data) that was used by the renderable.\n\t * @param {string} [pContent] - The content that was rendered.\n\t */\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent)\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Solver                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is solved.\n\t */\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved.\n\t */\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks.\n\t *\n\t * @return {boolean} - True if the view was solved successfully, false otherwise.\n\t */\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeSolve();\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : false;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) => \n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync Auto Callback Error: ${pError}`, pError)\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved.\n\t */\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal From View                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tonBeforeMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view.\n\t */\n\tonMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalFromViewAsync(fCallback)\n\t{\n\n\t\tthis.onMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalFromView();\n\t\tthis.onMarshalFromView();\n\t\tthis.onAfterMarshalFromView();\n\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalFromViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : false;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) => \n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync Auto Callback Error: ${pError}`, pError)\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalFromViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view.\n\t */\n\tonAfterMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal To View                          */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view.\n\t */\n\tonBeforeMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view.\n\t */\n\tonMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data into the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalToView();\n\t\tthis.onMarshalToView();\n\t\tthis.onAfterMarshalToView();\n\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalToViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : false;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) => \n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync Auto Callback Error: ${pError}`, pError)\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalToViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view.\n\t */\n\tonAfterMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/** @return {boolean} - True if the object is a PictView. */\n\tget isPictView()\n\t{\n\t\treturn true;\n\t}\n}\n\nmodule.exports = PictView;\n"]}