{"version":3,"sources":["pict-view.compatible.min.js","node_modules/browser-pack/_prelude.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase.js","source/Pict-View.js"],"names":["_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","writable","configurable","defineProperty","_setPrototypeOf","o","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","call","_typeof","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","_classCallCheck","instance","Constructor","_defineProperties","target","props","i","length","descriptor","enumerable","_toPropertyKey","key","_createClass","protoProps","staticProps","_defineProperty","obj","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","Number","iterator","f","exports","module","define","amd","window","global","PictView","r","n","t","c","require","u","a","Error","code","FableServiceProviderBase","pFable","pOptions","pServiceHash","isFable","connectFable","fable","UUID","getUUID","options","concat","Math","floor","random","serviceType","Hash","tmpErrorMessage","console","log","Logging","services","servicesMap","CoreServiceProviderBase","libFableServiceBase","defaultPictViewSettings","DefaultRenderable","DefaultDestinationAddress","DefaultTemplateRecordAddress","ViewIdentifier","AutoInitialize","AutoInitializeOrdinal","AutoRender","AutoRenderOrdinal","AutoSolveWithApp","AutoSolveOrdinal","CSSHash","CSS","CSSProvider","CSSPriority","Templates","DefaultTemplates","Renderables","Manifests","_libFableServiceBase","_super","_this","tmpOptions","assign","JSON","parse","stringify","pict","AppData","initializeTimestamp","lastSolvedTimestamp","lastRenderedTimestamp","lastMarshalFromViewTimestamp","lastMarshalToViewTimestamp","tmpTemplate","hasOwnProperty","Source","TemplateProvider","addTemplate","Template","error","tmpDefaultTemplate","addDefaultTemplate","Prefix","Postfix","tmpCSSHash","tmpCSSProvider","CSSMap","addCSS","renderables","addRenderable","pRenderableHash","pTemplateHash","pDefaultTemplateDataAddress","pDefaultDestinationAddress","pRenderMethod","tmpRenderable","RenderableHash","TemplateHash","DefaultTemplateDataAddress","RenderMethod","LogNoisiness","trace","fCallback","onBeforeInitialize","onInitialize","warn","onAfterInitialize","getTimeStamp","_this2","tmpAnticipate","instantiateServiceProviderWithoutRegistration","info","anticipate","onBeforeInitializeAsync","onInitializeAsync","onAfterInitializeAsync","wait","pError","pRenderable","pRenderDestinationAddress","pData","pTemplateDataAddress","tmpRenderableHash","tmpDataAddress","tmpData","tmpRenderDestinationAddress","ContentDestinationAddress","DataProvider","getDataByAddress","onBeforeRender","tmpContent","parseTemplateByHash","ContentAssignment","appendContent","prependContent","getElement","assignContent","onAfterRender","_this3","newAnticipate","fOnBeforeRenderCallback","onBeforeRenderAsync","fAsyncTemplateCallback","pContent","onAfterRenderAsync","onBeforeSolve","onSolve","onAfterSolve","_this4","onBeforeSolveAsync","onSolveAsync","onAfterSolveAsync","onBeforeMarshalFromView","onMarshalFromView","onAfterMarshalFromView","_this5","onBeforeMarshalFromViewAsync","onMarshalFromViewAsync","onAfterMarshalFromViewAsync","onBeforeMarshalToView","onMarshalToView","onAfterMarshalToView","_this6","onBeforeMarshalToViewAsync","onMarshalToViewAsync","onAfterMarshalToViewAsync"],"mappings":"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","file":"pict-view.compatible.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.PictView = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;\n},{}],2:[function(require,module,exports){\nconst libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// After the App initializes, initialize will be called as soon as it's added.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called as soon as it's added.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSSHash: false,\n\t\tCSS: false,\n\t\tCSSProvider: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\nclass PictView extends libFableServiceBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t// Convenience and consistency naming\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.pict.AppData;\n\n\t\tthis.initializeTimestamp = false;\n\t\tthis.lastSolvedTimestamp = false;\n\t\tthis.lastRenderedTimestamp = false;\n\t\tthis.lastMarshalFromViewTimestamp = false;\n\t\tthis.lastMarshalToViewTimestamp = false;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!tmpTemplate.hasOwnProperty('Hash') || !tmpTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!tmpDefaultTemplate.hasOwnProperty('Postfix') || !tmpDefaultTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load the CSS if it's available\n\t\tif (this.options.CSS)\n\t\t{\n\t\t\tlet tmpCSSHash = this.options.CSSHash ? this.options.CSSHash : `View-${this.options.ViewIdentifier}`;\n\t\t\tlet tmpCSSProvider = this.options.CSSProvider ? this.options.CSSProvider : tmpCSSHash;\n\t\t\tthis.pict.CSSMap.addCSS(tmpCSSHash, this.options.CSS, tmpCSSProvider, this.options.CSSPriority);\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\t\t\tthis.addRenderable(this.options.Renderables[i]);\n\t\t}\n\t}\n\n\taddRenderable(pRenderableHash, pTemplateHash, pDefaultTemplateDataAddress, pDefaultDestinationAddress, pRenderMethod)\n\t{\n\t\tlet tmpRenderable = false;\n\n\t\tif (typeof(pRenderableHash) == 'object')\n\t\t{\n\t\t\t// The developer passed in the renderable as an object.\n\t\t\t// Use theirs instead!\n\t\t\ttmpRenderable = pRenderableHash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpRenderMethod = (typeof(pRenderMethod) !== 'string') ? pRenderMethod : 'replace';\n\t\t\ttmpRenderable = (\n\t\t\t\t{\n\t\t\t\t\tRenderableHash: pRenderableHash,\n\t\t\t\t\tTemplateHash: pTemplateHash,\n\t\t\t\t\tDefaultTemplateDataAddress: pDefaultTemplateDataAddress,\n\t\t\t\t\tDefaultDestinationAddress: pDefaultDestinationAddress,\n\t\t\t\t\tRenderMethod: tmpRenderMethod\n\t\t\t\t});\n\t\t}\n\n\t\tif ((typeof(tmpRenderable.RenderableHash) != 'string') || (typeof(tmpRenderable.TemplateHash) != 'string'))\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`, tmpRenderable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${tmpRenderable.RenderableHash}] pointed to template ${tmpRenderable.TemplateHash}.`);\n\t\t\t}\n\n\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Code Section: Initialization                        */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\tonInitialize()\n\t{\n\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\tinitialize()\n\t{\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\t\t\tthis.onAfterInitialize();\n\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\tinitializeAsync(fCallback)\n\t{\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallback();\n\t\t\t\t})\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Render                            */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pData)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\trender(pRenderable, pRenderDestinationAddress, pTemplateDataAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpDataAddress;\n\t\tlet tmpData;\n\n\t\tif (typeof(pTemplateDataAddress) === 'object')\n\t\t{\n\t\t\ttmpData = pTemplateDataAddress;\n\t\t\ttmpDataAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpData = (typeof (tmpDataAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\t}\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData)\n\n\t\t// Assign the content to the destination address\n\t\tswitch(tmpRenderable.RenderMethod)\n\t\t{\n\t\t\tcase 'append':\n\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'prepend':\n\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'append_once':\n\t\t\t\t// Try to find the content in the destination address\n\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t{\n\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\t}\n\t\t\tcase 'replace':\n\t\t\tdefault:\n\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData, tmpContent)\n\n\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\treturn true;\n\t}\n\trenderAsync(pRenderable, pRenderDestinationAddress, pTemplateDataAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn fCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpDataAddress;\n\t\tlet tmpData;\n\n\t\tif (typeof(pTemplateDataAddress) === 'object')\n\t\t{\n\t\t\ttmpData = pTemplateDataAddress;\n\t\t\ttmpDataAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpData = (typeof (tmpDataAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\t}\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\t//\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnBeforeRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\t\t\t\tthis.onBeforeRenderAsync(\n\t\t\t\t\t(pError) =>\n\t\t\t\t\t{\n\t\t\t\t\t\treturn fOnBeforeRenderCallback(pError);\n\t\t\t\t\t});\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fAsyncTemplateCallback) =>\n\t\t\t{\n\t\t\t\t// Render the template (asynchronously)\n\t\t\t\tthis.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData,\n\t\t\t\t\t(pError, pContent) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderable}) because it did not parse the template.`, pError);\n\t\t\t\t\t\t\treturn fAsyncTemplateCallback(pError);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Assign the content to the destination address\n\t\t\t\t\t\tswitch(tmpRenderable.RenderMethod)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'append':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'prepend':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'append_once':\n\t\t\t\t\t\t\t\t// Try to find the content in the destination address\n\t\t\t\t\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\t\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase 'replace':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Execute the developer-overridable asynchronous post-render behavior\n\t\t\t\t\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\t\t\t\t\treturn this.onAfterRenderAsync(fAsyncTemplateCallback, pContent);\n\t\t\t\t\t});\n\t\t\t});\n\t\ttmpAnticipate.wait(fCallback);\n\t}\n\n\tonAfterRender()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\tthis.onAfterRender();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Solver                            */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeSolve();\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal From View                        */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\tmarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalFromView();\n\t\tthis.onMarshalFromView();\n\t\tthis.onAfterMarshalFromView();\n\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tmarshalFromViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal To View                          */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\tmarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalToView();\n\t\tthis.onMarshalToView();\n\t\tthis.onAfterMarshalToView();\n\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tmarshalToViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToView();\n\t\treturn fCallback();\n\t}\n}\n\nmodule.exports = PictView;\n},{\"fable-serviceproviderbase\":1}]},{},[2])(2)\n});\n\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;","const libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// After the App initializes, initialize will be called as soon as it's added.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called as soon as it's added.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSSHash: false,\n\t\tCSS: false,\n\t\tCSSProvider: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\nclass PictView extends libFableServiceBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t// Convenience and consistency naming\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.pict.AppData;\n\n\t\tthis.initializeTimestamp = false;\n\t\tthis.lastSolvedTimestamp = false;\n\t\tthis.lastRenderedTimestamp = false;\n\t\tthis.lastMarshalFromViewTimestamp = false;\n\t\tthis.lastMarshalToViewTimestamp = false;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!tmpTemplate.hasOwnProperty('Hash') || !tmpTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!tmpDefaultTemplate.hasOwnProperty('Postfix') || !tmpDefaultTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load the CSS if it's available\n\t\tif (this.options.CSS)\n\t\t{\n\t\t\tlet tmpCSSHash = this.options.CSSHash ? this.options.CSSHash : `View-${this.options.ViewIdentifier}`;\n\t\t\tlet tmpCSSProvider = this.options.CSSProvider ? this.options.CSSProvider : tmpCSSHash;\n\t\t\tthis.pict.CSSMap.addCSS(tmpCSSHash, this.options.CSS, tmpCSSProvider, this.options.CSSPriority);\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\t\t\tthis.addRenderable(this.options.Renderables[i]);\n\t\t}\n\t}\n\n\taddRenderable(pRenderableHash, pTemplateHash, pDefaultTemplateDataAddress, pDefaultDestinationAddress, pRenderMethod)\n\t{\n\t\tlet tmpRenderable = false;\n\n\t\tif (typeof(pRenderableHash) == 'object')\n\t\t{\n\t\t\t// The developer passed in the renderable as an object.\n\t\t\t// Use theirs instead!\n\t\t\ttmpRenderable = pRenderableHash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpRenderMethod = (typeof(pRenderMethod) !== 'string') ? pRenderMethod : 'replace';\n\t\t\ttmpRenderable = (\n\t\t\t\t{\n\t\t\t\t\tRenderableHash: pRenderableHash,\n\t\t\t\t\tTemplateHash: pTemplateHash,\n\t\t\t\t\tDefaultTemplateDataAddress: pDefaultTemplateDataAddress,\n\t\t\t\t\tDefaultDestinationAddress: pDefaultDestinationAddress,\n\t\t\t\t\tRenderMethod: tmpRenderMethod\n\t\t\t\t});\n\t\t}\n\n\t\tif ((typeof(tmpRenderable.RenderableHash) != 'string') || (typeof(tmpRenderable.TemplateHash) != 'string'))\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`, tmpRenderable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${tmpRenderable.RenderableHash}] pointed to template ${tmpRenderable.TemplateHash}.`);\n\t\t\t}\n\n\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Code Section: Initialization                        */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\tonInitialize()\n\t{\n\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\tinitialize()\n\t{\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\t\t\tthis.onAfterInitialize();\n\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\tinitializeAsync(fCallback)\n\t{\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallback();\n\t\t\t\t})\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Render                            */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pData)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\trender(pRenderable, pRenderDestinationAddress, pTemplateDataAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpDataAddress;\n\t\tlet tmpData;\n\n\t\tif (typeof(pTemplateDataAddress) === 'object')\n\t\t{\n\t\t\ttmpData = pTemplateDataAddress;\n\t\t\ttmpDataAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpData = (typeof (tmpDataAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\t}\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData)\n\n\t\t// Assign the content to the destination address\n\t\tswitch(tmpRenderable.RenderMethod)\n\t\t{\n\t\t\tcase 'append':\n\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'prepend':\n\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'append_once':\n\t\t\t\t// Try to find the content in the destination address\n\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t{\n\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\t}\n\t\t\tcase 'replace':\n\t\t\tdefault:\n\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData, tmpContent)\n\n\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\treturn true;\n\t}\n\trenderAsync(pRenderable, pRenderDestinationAddress, pTemplateDataAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn fCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpDataAddress;\n\t\tlet tmpData;\n\n\t\tif (typeof(pTemplateDataAddress) === 'object')\n\t\t{\n\t\t\ttmpData = pTemplateDataAddress;\n\t\t\ttmpDataAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpData = (typeof (tmpDataAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\t}\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\t//\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnBeforeRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\t\t\t\tthis.onBeforeRenderAsync(\n\t\t\t\t\t(pError) =>\n\t\t\t\t\t{\n\t\t\t\t\t\treturn fOnBeforeRenderCallback(pError);\n\t\t\t\t\t});\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fAsyncTemplateCallback) =>\n\t\t\t{\n\t\t\t\t// Render the template (asynchronously)\n\t\t\t\tthis.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData,\n\t\t\t\t\t(pError, pContent) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderable}) because it did not parse the template.`, pError);\n\t\t\t\t\t\t\treturn fAsyncTemplateCallback(pError);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Assign the content to the destination address\n\t\t\t\t\t\tswitch(tmpRenderable.RenderMethod)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'append':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'prepend':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'append_once':\n\t\t\t\t\t\t\t\t// Try to find the content in the destination address\n\t\t\t\t\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\t\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase 'replace':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Execute the developer-overridable asynchronous post-render behavior\n\t\t\t\t\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\t\t\t\t\treturn this.onAfterRenderAsync(fAsyncTemplateCallback, pContent);\n\t\t\t\t\t});\n\t\t\t});\n\t\ttmpAnticipate.wait(fCallback);\n\t}\n\n\tonAfterRender()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\tthis.onAfterRender();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Solver                            */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeSolve();\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal From View                        */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\tmarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalFromView();\n\t\tthis.onMarshalFromView();\n\t\tthis.onAfterMarshalFromView();\n\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tmarshalFromViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal To View                          */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\tmarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalToView();\n\t\tthis.onMarshalToView();\n\t\tthis.onAfterMarshalToView();\n\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tmarshalToViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToView();\n\t\treturn fCallback();\n\t}\n}\n\nmodule.exports = PictView;"]}