{"version":3,"sources":["pict-view.compatible.min.js","node_modules/browser-pack/_prelude.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase.js","source/Pict-View.js"],"names":["_callSuper","t","o","e","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","constructor","apply","self","call","_typeof","TypeError","_assertThisInitialized","ReferenceError","Boolean","prototype","valueOf","Object","setPrototypeOf","getPrototypeOf","bind","__proto__","_inherits","subClass","superClass","create","value","writable","configurable","defineProperty","_setPrototypeOf","p","_classCallCheck","instance","Constructor","_defineProperties","target","props","i","length","descriptor","enumerable","_toPropertyKey","key","_createClass","protoProps","staticProps","_defineProperty","obj","_toPrimitive","r","Symbol","toPrimitive","String","Number","iterator","f","exports","module","define","amd","window","global","this","PictView","n","c","require","u","a","Error","code","FableServiceProviderBase","pFable","pOptions","pServiceHash","isFable","connectFable","fable","UUID","getUUID","options","concat","Math","floor","random","serviceType","Hash","tmpErrorMessage","console","log","Logging","services","servicesMap","CoreServiceProviderBase","libFableServiceBase","defaultPictViewSettings","DefaultRenderable","DefaultDestinationAddress","DefaultTemplateRecordAddress","ViewIdentifier","AutoInitialize","AutoInitializeOrdinal","AutoRender","AutoRenderOrdinal","AutoSolveWithApp","AutoSolveOrdinal","CSSHash","CSS","CSSProvider","CSSPriority","Templates","DefaultTemplates","Renderables","Manifests","_libFableServiceBase","_this","assign","JSON","parse","stringify","pict","AppData","initializeTimestamp","lastSolvedTimestamp","lastRenderedTimestamp","lastMarshalFromViewTimestamp","lastMarshalToViewTimestamp","tmpTemplate","hasOwnProperty","Source","TemplateProvider","addTemplate","Template","error","tmpDefaultTemplate","addDefaultTemplate","Prefix","Postfix","tmpCSSHash","tmpCSSProvider","CSSMap","addCSS","renderables","addRenderable","pRenderableHash","pTemplateHash","pDefaultTemplateDataAddress","pDefaultDestinationAddress","pRenderMethod","tmpRenderable","RenderableHash","TemplateHash","DefaultTemplateDataAddress","RenderMethod","LogNoisiness","trace","fCallback","onBeforeInitialize","onInitialize","LogControlFlow","warn","onAfterInitialize","getTimeStamp","_this2","tmpAnticipate","instantiateServiceProviderWithoutRegistration","info","anticipate","onBeforeInitializeAsync","onInitializeAsync","onAfterInitializeAsync","wait","pError","pRenderable","pRenderDestinationAddress","pData","pTemplateDataAddress","tmpRenderableHash","tmpDataAddress","tmpData","tmpRenderDestinationAddress","ContentDestinationAddress","DataProvider","getDataByAddress","undefined","onBeforeRender","tmpContent","parseTemplateByHash","ContentAssignment","appendContent","prependContent","getElement","assignContent","onAfterRender","_this3","newAnticipate","fOnBeforeRenderCallback","onBeforeRenderAsync","fAsyncTemplateCallback","pContent","fOnAfterRenderCallback","onAfterRenderAsync","renderAsync","onBeforeSolve","onSolve","onAfterSolve","_this4","onBeforeSolveAsync","onSolveAsync","onAfterSolveAsync","onBeforeMarshalFromView","onMarshalFromView","onAfterMarshalFromView","_this5","onBeforeMarshalFromViewAsync","onMarshalFromViewAsync","onAfterMarshalFromViewAsync","onBeforeMarshalToView","onMarshalToView","onAfterMarshalToView","_this6","onBeforeMarshalToViewAsync","onMarshalToViewAsync","onAfterMarshalToViewAsync"],"mappings":"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","file":"pict-view.compatible.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.PictView = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;\n},{}],2:[function(require,module,exports){\nconst libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// After the App initializes, initialize will be called as soon as it's added.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called as soon as it's added.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSSHash: false,\n\t\tCSS: false,\n\t\tCSSProvider: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\nclass PictView extends libFableServiceBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t// Convenience and consistency naming\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.pict.AppData;\n\n\t\tthis.initializeTimestamp = false;\n\t\tthis.lastSolvedTimestamp = false;\n\t\tthis.lastRenderedTimestamp = false;\n\t\tthis.lastMarshalFromViewTimestamp = false;\n\t\tthis.lastMarshalToViewTimestamp = false;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!tmpTemplate.hasOwnProperty('Hash') || !tmpTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!tmpDefaultTemplate.hasOwnProperty('Postfix') || !tmpDefaultTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load the CSS if it's available\n\t\tif (this.options.CSS)\n\t\t{\n\t\t\tlet tmpCSSHash = this.options.CSSHash ? this.options.CSSHash : `View-${this.options.ViewIdentifier}`;\n\t\t\tlet tmpCSSProvider = this.options.CSSProvider ? this.options.CSSProvider : tmpCSSHash;\n\t\t\tthis.pict.CSSMap.addCSS(tmpCSSHash, this.options.CSS, tmpCSSProvider, this.options.CSSPriority);\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\t\t\tthis.addRenderable(this.options.Renderables[i]);\n\t\t}\n\t}\n\n\taddRenderable(pRenderableHash, pTemplateHash, pDefaultTemplateDataAddress, pDefaultDestinationAddress, pRenderMethod)\n\t{\n\t\tlet tmpRenderable = false;\n\n\t\tif (typeof(pRenderableHash) == 'object')\n\t\t{\n\t\t\t// The developer passed in the renderable as an object.\n\t\t\t// Use theirs instead!\n\t\t\ttmpRenderable = pRenderableHash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpRenderMethod = (typeof(pRenderMethod) !== 'string') ? pRenderMethod : 'replace';\n\t\t\ttmpRenderable = (\n\t\t\t\t{\n\t\t\t\t\tRenderableHash: pRenderableHash,\n\t\t\t\t\tTemplateHash: pTemplateHash,\n\t\t\t\t\tDefaultTemplateDataAddress: pDefaultTemplateDataAddress,\n\t\t\t\t\tDefaultDestinationAddress: pDefaultDestinationAddress,\n\t\t\t\t\tRenderMethod: tmpRenderMethod\n\t\t\t\t});\n\t\t}\n\n\t\tif ((typeof(tmpRenderable.RenderableHash) != 'string') || (typeof(tmpRenderable.TemplateHash) != 'string'))\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`, tmpRenderable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${tmpRenderable.RenderableHash}] pointed to template ${tmpRenderable.TemplateHash}.`);\n\t\t\t}\n\n\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Code Section: Initialization                        */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\tonInitialize()\n\t{\n\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\tinitialize()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\t\t\tthis.onAfterInitialize();\n\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\tinitializeAsync(fCallback)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initializeAsync:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallback();\n\t\t\t\t})\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Render                            */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pData)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\trender(pRenderable, pRenderDestinationAddress, pTemplateDataAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpDataAddress;\n\t\tlet tmpData;\n\n\t\tif (typeof(pTemplateDataAddress) === 'object')\n\t\t{\n\t\t\ttmpData = pTemplateDataAddress;\n\t\t\ttmpDataAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpData = (typeof (tmpDataAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\t}\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateDataAddress[${tmpDataAddress}] render:`);\n\t\t}\n\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData, null, [this])\n\n\t\t// Assign the content to the destination address\n\t\tswitch(tmpRenderable.RenderMethod)\n\t\t{\n\t\t\tcase 'append':\n\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'prepend':\n\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'append_once':\n\t\t\t\t// Try to find the content in the destination address\n\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t{\n\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'replace':\n\t\t\t\t// TODO: Should this be the default?\n\t\t\tdefault:\n\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData, tmpContent)\n\n\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\treturn true;\n\t}\n\trenderAsync(pRenderable, pRenderDestinationAddress, pTemplateDataAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn fCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpDataAddress;\n\t\tlet tmpData;\n\n\t\tif (typeof(pTemplateDataAddress) === 'object')\n\t\t{\n\t\t\ttmpData = pTemplateDataAddress;\n\t\t\ttmpDataAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpData = (typeof (tmpDataAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\t}\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateDataAddress[${tmpDataAddress}] renderAsync:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Asynchronous Render (callback-style)...`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 4)\n\t\t{\n\t\t\tthis.log.trace(`At-render AppData: `, this.AppData);\n\t\t}\n\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnBeforeRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\t\t\t\tthis.onBeforeRenderAsync(fOnBeforeRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fAsyncTemplateCallback) =>\n\t\t\t{\n\t\t\t\t// Render the template (asynchronously)\n\t\t\t\tthis.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData,\n\t\t\t\t\t(pError, pContent) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderable}) because it did not parse the template.`, pError);\n\t\t\t\t\t\t\treturn fAsyncTemplateCallback(pError);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Assign the content to the destination address\n\t\t\t\t\t\tswitch(tmpRenderable.RenderMethod)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'append':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'prepend':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'append_once':\n\t\t\t\t\t\t\t\t// Try to find the content in the destination address\n\t\t\t\t\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\t\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase 'replace':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Execute the developer-overridable asynchronous post-render behavior\n\t\t\t\t\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\t\treturn fAsyncTemplateCallback();\n\t\t\t\t\t}, [this]);\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnAfterRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\t\t\t\tthis.onAfterRenderAsync(fOnAfterRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.wait(fCallback);\n\t}\n\trenderDefaultAsync(fCallback)\n\t{\n\t\t// Render the default renderable (falses do the proper forward lookups of values from config and such)\n\t\tthis.renderAsync(false, false, false, fCallback);\n\t}\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pData)\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Solver                            */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeSolve();\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal From View                        */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\tmarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalFromView();\n\t\tthis.onMarshalFromView();\n\t\tthis.onAfterMarshalFromView();\n\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tmarshalFromViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal To View                          */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\tmarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalToView();\n\t\tthis.onMarshalToView();\n\t\tthis.onAfterMarshalToView();\n\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tmarshalToViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToView();\n\t\treturn fCallback();\n\t}\n}\n\nmodule.exports = PictView;\n},{\"fable-serviceproviderbase\":1}]},{},[2])(2)\n});\n\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;","const libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// After the App initializes, initialize will be called as soon as it's added.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called as soon as it's added.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSSHash: false,\n\t\tCSS: false,\n\t\tCSSProvider: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\nclass PictView extends libFableServiceBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t// Convenience and consistency naming\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.pict.AppData;\n\n\t\tthis.initializeTimestamp = false;\n\t\tthis.lastSolvedTimestamp = false;\n\t\tthis.lastRenderedTimestamp = false;\n\t\tthis.lastMarshalFromViewTimestamp = false;\n\t\tthis.lastMarshalToViewTimestamp = false;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!tmpTemplate.hasOwnProperty('Hash') || !tmpTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!tmpDefaultTemplate.hasOwnProperty('Postfix') || !tmpDefaultTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load the CSS if it's available\n\t\tif (this.options.CSS)\n\t\t{\n\t\t\tlet tmpCSSHash = this.options.CSSHash ? this.options.CSSHash : `View-${this.options.ViewIdentifier}`;\n\t\t\tlet tmpCSSProvider = this.options.CSSProvider ? this.options.CSSProvider : tmpCSSHash;\n\t\t\tthis.pict.CSSMap.addCSS(tmpCSSHash, this.options.CSS, tmpCSSProvider, this.options.CSSPriority);\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\t\t\tthis.addRenderable(this.options.Renderables[i]);\n\t\t}\n\t}\n\n\taddRenderable(pRenderableHash, pTemplateHash, pDefaultTemplateDataAddress, pDefaultDestinationAddress, pRenderMethod)\n\t{\n\t\tlet tmpRenderable = false;\n\n\t\tif (typeof(pRenderableHash) == 'object')\n\t\t{\n\t\t\t// The developer passed in the renderable as an object.\n\t\t\t// Use theirs instead!\n\t\t\ttmpRenderable = pRenderableHash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpRenderMethod = (typeof(pRenderMethod) !== 'string') ? pRenderMethod : 'replace';\n\t\t\ttmpRenderable = (\n\t\t\t\t{\n\t\t\t\t\tRenderableHash: pRenderableHash,\n\t\t\t\t\tTemplateHash: pTemplateHash,\n\t\t\t\t\tDefaultTemplateDataAddress: pDefaultTemplateDataAddress,\n\t\t\t\t\tDefaultDestinationAddress: pDefaultDestinationAddress,\n\t\t\t\t\tRenderMethod: tmpRenderMethod\n\t\t\t\t});\n\t\t}\n\n\t\tif ((typeof(tmpRenderable.RenderableHash) != 'string') || (typeof(tmpRenderable.TemplateHash) != 'string'))\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`, tmpRenderable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${tmpRenderable.RenderableHash}] pointed to template ${tmpRenderable.TemplateHash}.`);\n\t\t\t}\n\n\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Code Section: Initialization                        */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\tonInitialize()\n\t{\n\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\tinitialize()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\t\t\tthis.onAfterInitialize();\n\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\tinitializeAsync(fCallback)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initializeAsync:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallback();\n\t\t\t\t})\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Render                            */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pData)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\trender(pRenderable, pRenderDestinationAddress, pTemplateDataAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpDataAddress;\n\t\tlet tmpData;\n\n\t\tif (typeof(pTemplateDataAddress) === 'object')\n\t\t{\n\t\t\ttmpData = pTemplateDataAddress;\n\t\t\ttmpDataAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpData = (typeof (tmpDataAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\t}\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateDataAddress[${tmpDataAddress}] render:`);\n\t\t}\n\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData, null, [this])\n\n\t\t// Assign the content to the destination address\n\t\tswitch(tmpRenderable.RenderMethod)\n\t\t{\n\t\t\tcase 'append':\n\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'prepend':\n\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'append_once':\n\t\t\t\t// Try to find the content in the destination address\n\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t{\n\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'replace':\n\t\t\t\t// TODO: Should this be the default?\n\t\t\tdefault:\n\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData, tmpContent)\n\n\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\treturn true;\n\t}\n\trenderAsync(pRenderable, pRenderDestinationAddress, pTemplateDataAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn fCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpDataAddress;\n\t\tlet tmpData;\n\n\t\tif (typeof(pTemplateDataAddress) === 'object')\n\t\t{\n\t\t\ttmpData = pTemplateDataAddress;\n\t\t\ttmpDataAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpData = (typeof (tmpDataAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\t}\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateDataAddress[${tmpDataAddress}] renderAsync:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Asynchronous Render (callback-style)...`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 4)\n\t\t{\n\t\t\tthis.log.trace(`At-render AppData: `, this.AppData);\n\t\t}\n\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnBeforeRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\t\t\t\tthis.onBeforeRenderAsync(fOnBeforeRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fAsyncTemplateCallback) =>\n\t\t\t{\n\t\t\t\t// Render the template (asynchronously)\n\t\t\t\tthis.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData,\n\t\t\t\t\t(pError, pContent) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderable}) because it did not parse the template.`, pError);\n\t\t\t\t\t\t\treturn fAsyncTemplateCallback(pError);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Assign the content to the destination address\n\t\t\t\t\t\tswitch(tmpRenderable.RenderMethod)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'append':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'prepend':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'append_once':\n\t\t\t\t\t\t\t\t// Try to find the content in the destination address\n\t\t\t\t\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\t\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase 'replace':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Execute the developer-overridable asynchronous post-render behavior\n\t\t\t\t\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\t\treturn fAsyncTemplateCallback();\n\t\t\t\t\t}, [this]);\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnAfterRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\t\t\t\tthis.onAfterRenderAsync(fOnAfterRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.wait(fCallback);\n\t}\n\trenderDefaultAsync(fCallback)\n\t{\n\t\t// Render the default renderable (falses do the proper forward lookups of values from config and such)\n\t\tthis.renderAsync(false, false, false, fCallback);\n\t}\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pData)\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Solver                            */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeSolve();\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal From View                        */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\tmarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalFromView();\n\t\tthis.onMarshalFromView();\n\t\tthis.onAfterMarshalFromView();\n\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tmarshalFromViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal To View                          */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\tmarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalToView();\n\t\tthis.onMarshalToView();\n\t\tthis.onAfterMarshalToView();\n\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tmarshalToViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToView();\n\t\treturn fCallback();\n\t}\n}\n\nmodule.exports = PictView;"]}