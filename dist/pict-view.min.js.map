{"version":3,"sources":["pict-view.min.js","node_modules/browser-pack/_prelude.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase-Preinit.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase.js","source/Pict-View.js"],"names":["_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","f","exports","module","define","amd","window","global","self","this","PictView","r","e","n","t","o","i","c","require","u","a","Error","code","p","length","FableCoreServiceProviderBase","constructor","pOptions","pServiceHash","fable","options","serviceType","UUID","concat","Math","floor","random","Hash","connectFable","pFable","FableServiceProviderBase","isFable","getUUID","log","servicesMap","services","CoreServiceProviderBase","libFableServiceBase","defaultPictViewSettings","DefaultRenderable","DefaultDestinationAddress","DefaultTemplateRecordAddress","ViewIdentifier","InitializeOnLoad","RenderOnLoad","Templates","DefaultTemplates","Renderables","Manifests","super","assign","JSON","parse","stringify","pict","AppData","tmpTemplate","hasOwnProperty","Source","TemplateProvider","addTemplate","Template","error","tmpDefaultTemplate","addDefaultTemplate","Prefix","Postfix","renderables","tmpRenderable","RenderableHash","onBeforeInitialize","fCallback","initialize","onAfterInitialize","info","internalInitialize","onAfterInitialRender","onBeforeRender","pRenderable","pRenderDestinationAddress","pData","render","pTemplateDataAddress","tmpRenderableHash","tmpRenderDestinationAddress","ContentDestinationAddress","tmpDataAddress","RecordAddress","tmpData","DataProvider","getDataByAddress","tmpContent","parseTemplateByHash","TemplateHash","ContentAssignment","assignContent","onAfterRender","renderAsync","pError","pContent"],"mappings":"AAAA,aAEA,SAASA,gBAAgBC,EAAKC,EAAKC,GAA4L,OAAnLD,EAAME,eAAeF,MAAiBD,EAAOI,OAAOC,eAAeL,EAAKC,EAAK,CAAEC,MAAOA,EAAOI,YAAY,EAAMC,cAAc,EAAMC,UAAU,IAAkBR,EAAIC,GAAOC,EAAgBF,CAAK,CAC3O,SAASG,eAAeM,GAAO,IAAIR,EAAMS,aAAaD,EAAK,UAAW,MAAsB,iBAARR,EAAmBA,EAAMU,OAAOV,EAAM,CAC1H,SAASS,aAAaE,EAAOC,GAAQ,GAAqB,iBAAVD,GAAgC,OAAVA,EAAgB,OAAOA,EAAO,IAAIE,EAAOF,EAAMG,OAAOC,aAAc,QAAaC,IAATH,EAAoB,CAAE,IAAII,EAAMJ,EAAKK,KAAKP,EAAOC,GAAQ,WAAY,GAAmB,iBAARK,EAAkB,OAAOA,EAAK,MAAM,IAAIE,UAAU,+CAAiD,CAAE,OAAiB,WAATP,EAAoBF,OAASU,QAAQT,EAAQ,ECJxX,SAAAU,GAAA,GAAA,iBAAAC,SAAA,oBAAAC,OAAAA,OAAAD,QAAAD,SAAA,GAAA,mBAAAG,QAAAA,OAAAC,IAAAD,OAAA,GAAAH,OAAA,EAAA,oBAAAK,OAAAA,OAAA,oBAAAC,OAAAA,OAAA,oBAAAC,KAAAA,KAAAC,MAAAC,SAAAT,GAAA,CAAA,CAAA,EAAA,WAAA,OAAA,SAAAU,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAf,GAAA,IAAAY,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAC,EAAA,mBAAAC,SAAAA,QAAA,IAAAjB,GAAAgB,EAAA,OAAAA,EAAAD,GAAA,GAAA,GAAAG,EAAA,OAAAA,EAAAH,GAAA,GAAA,IAAAI,EAAA,IAAAC,MAAA,uBAAAL,EAAA,KAAA,MAAAI,EAAAE,KAAA,mBAAAF,CAAA,CAAA,IAAAG,EAAAV,EAAAG,GAAA,CAAAd,QAAA,CAAA,GAAAU,EAAAI,GAAA,GAAAlB,KAAAyB,EAAArB,SAAA,SAAAS,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,EAAA,GAAAY,EAAAA,EAAArB,QAAAS,EAAAC,EAAAC,EAAAC,EAAA,CAAA,OAAAD,EAAAG,GAAAd,OAAA,CAAA,IAAA,IAAAiB,EAAA,mBAAAD,SAAAA,QAAAF,EAAA,EAAAA,EAAAF,EAAAU,OAAAR,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,SAAAG,EAAAf,EAAAD,GCSA,MAAAuB,EAEAC,YAAAC,EAAAC,GAEAnB,KAAAoB,OAAA,EAEApB,KAAAqB,QAAA,iBAAAH,EAAAA,EAAA,CAAA,EAEAlB,KAAAsB,YAAA,UAGAtB,KAAAuB,KAAA,WAAAC,OAAAC,KAAAC,MAAA,MAAAD,KAAAE,SAAA,MAEA3B,KAAA4B,KAAA,iBAAAT,EAAAA,EAAA,GAAAK,OAAAxB,KAAAuB,KACA,CAMAM,aAAAC,GAIA,OAFA9B,KAAAoB,MAAAU,GAEA,CACA,EACA7D,gBA1BA+C,EAAA,kBAiBA,GAWAtB,EAAAD,QAAAuB,CFGA,EAAE,CAAC,GAAG,EAAE,CAAC,SAASP,EAAQf,EAAOD,GGnCjC,MAAAsC,EAEAd,YAAAa,EAAAZ,EAAAC,GAEAnB,KAAAoB,MAAAU,EAEA9B,KAAAqB,QAAA,iBAAAH,EAAAA,EACA,iBAAAY,GAAAA,EAAAE,QACA,CAAA,EADAF,EAGA9B,KAAAsB,YAAA,UAEA,mBAAAQ,EAAAG,QAEAjC,KAAAuB,KAAAO,EAAAG,UAIAjC,KAAAuB,KAAA,cAAAC,OAAAC,KAAAC,MAAA,MAAAD,KAAAE,SAAA,MAGA3B,KAAA4B,KAAA,iBAAAT,EAAAA,EAAA,GAAAK,OAAAxB,KAAAuB,MAGAvB,KAAAkC,IAAAlC,KAAAoB,MAAAc,IACAlC,KAAAmC,YAAAnC,KAAAoB,MAAAe,YACAnC,KAAAoC,SAAApC,KAAAoB,MAAAgB,QACA,EAGAnE,gBA9BA8D,EAAA,kBA6BA,GAGArC,EAAAD,QAAAsC,EAEArC,EAAAD,QAAA4C,wBAAA5B,EAAA,yCH0CA,EAAE,CAAC,yCAAyC,IAAI,EAAE,CAAC,SAASA,EAAQf,EAAOD,GIjF3E,MAAA6C,EAAA7B,EAAA,6BAEA8B,EACA,CACAC,mBAAA,EACAC,2BAAA,EACAC,8BAAA,EAEAC,eAAA,UAEAC,kBAAA,EACAC,cAAA,EAEAC,UAAA,GAEAC,iBAAA,GAEAC,YAAA,GAEAC,UAAA,CAAA,GA4NAvD,EAAAD,QAzNA,cAAA6C,EAEArB,YAAAa,EAAAZ,EAAAC,GAIA+B,MAAApB,EADAxD,OAAA6E,OAAA,CAAA,EAAAC,KAAAC,MAAAD,KAAAE,UAAAf,IAAArB,GACAC,GACAnB,KAAAsB,YAAA,WAEAtB,KAAAuD,KAAAvD,KAAAoB,MAEApB,KAAAwD,QAAAxD,KAAAoB,MAAAoC,QAIA,IAAA,IAAAjD,EAAA,EAAAA,EAAAP,KAAAqB,QAAAyB,UAAA/B,OAAAR,IACA,CACA,IAAAkD,EAAAzD,KAAAqB,QAAAyB,UAAAvC,GAEAkD,EAAAC,eAAA,SAAAD,EAAAC,eAAA,aAMAD,EAAAE,SAEAF,EAAAE,OAAA,aAAAnC,OAAAxB,KAAAuB,KAAA,QAAAC,OAAAxB,KAAA4B,KAAA,MAAAJ,OAAAxB,KAAAqB,QAAAsB,eAAA,qBAEA3C,KAAAoB,MAAAwC,iBAAAC,YAAAJ,EAAA7B,KAAA6B,EAAAK,SAAAL,EAAAE,SARA3D,KAAAkC,IAAA6B,MAAA,aAAAvC,OAAAxB,KAAAuB,KAAA,QAAAC,OAAAxB,KAAA4B,KAAA,MAAAJ,OAAAxB,KAAAqB,QAAAsB,eAAA,6BAAAnB,OAAAjB,EAAA,0BAAAkD,EAUA,CAIA,IAAA,IAAAlD,EAAA,EAAAA,EAAAP,KAAAqB,QAAA0B,iBAAAhC,OAAAR,IACA,CACA,IAAAyD,EAAAhE,KAAAqB,QAAA0B,iBAAAxC,GAEAyD,EAAAN,eAAA,YAAAM,EAAAN,eAAA,aAMAM,EAAAL,SAEAK,EAAAL,OAAA,aAAAnC,OAAAxB,KAAAuB,KAAA,QAAAC,OAAAxB,KAAA4B,KAAA,MAAAJ,OAAAxB,KAAAqB,QAAAsB,eAAA,qBAEA3C,KAAAoB,MAAAwC,iBAAAK,mBAAAD,EAAAE,OAAAF,EAAAG,QAAAH,EAAAF,SAAAE,EAAAL,SARA3D,KAAAkC,IAAA6B,MAAA,aAAAvC,OAAAxB,KAAAuB,KAAA,QAAAC,OAAAxB,KAAA4B,KAAA,MAAAJ,OAAAxB,KAAAqB,QAAAsB,eAAA,qCAAAnB,OAAAjB,EAAA,0BAAAyD,EAUA,CAOAhE,KAAAoE,YAAA,CAAA,EACA,IAAA,IAAA7D,EAAA,EAAAA,EAAAP,KAAAqB,QAAA2B,YAAAjC,OAAAR,IACA,CACA,IAAA8D,EAAArE,KAAAqB,QAAA2B,YAAAzC,GAEA8D,EAAAX,eAAA,mBAAAW,EAAAX,eAAA,gBAMA1D,KAAAoE,YAAAC,EAAAC,gBAAAD,EAJArE,KAAAkC,IAAA6B,MAAA,aAAAvC,OAAAxB,KAAAuB,KAAA,QAAAC,OAAAxB,KAAA4B,KAAA,MAAAJ,OAAAxB,KAAAqB,QAAAsB,eAAA,+BAAAnB,OAAAjB,EAAA,0BAAA8D,EAMA,CACA,CAEAE,mBAAAC,GAEA,OAAA,CACA,CAGAC,WAAAD,GAEA,OAAA,CACA,CAEAE,kBAAAF,GAEA,OAAA,CACA,CAEAC,aAGAzE,KAAAuE,qBAEAvE,KAAAkC,IAAAyC,KAAA,aAAAnD,OAAAxB,KAAAuB,KAAA,QAAAC,OAAAxB,KAAA4B,KAAA,MAAAJ,OAAAxB,KAAAqB,QAAAsB,eAAA,iCACA3C,KAAA4E,qBACA5E,KAAAkC,IAAAyC,KAAA,aAAAnD,OAAAxB,KAAAuB,KAAA,QAAAC,OAAAxB,KAAA4B,KAAA,MAAAJ,OAAAxB,KAAAqB,QAAAsB,eAAA,8BACA3C,KAAA6E,sBACA,CAEAC,eAAAC,EAAAC,EAAAC,GAEA,CAGAC,OAAAH,EAAAC,EAAAG,GAEA,IAAAC,EAAA,iBAAAL,EAAAA,EACA,iBAAA/E,KAAAqB,QAAAmB,mBAAAxC,KAAAqB,QAAAmB,kBACA,IAAA4C,EAGA,OADApF,KAAAkC,IAAA6B,MAAA,aAAAvC,OAAAxB,KAAAuB,KAAA,QAAAC,OAAAxB,KAAA4B,KAAA,MAAAJ,OAAAxB,KAAAqB,QAAAsB,eAAA,sBAAAnB,OAAA4D,EAAA,YAAA5D,OAAAuD,EAAA,6CACA,EAGA,IAAAV,EAAArE,KAAAoE,YAAAgB,GAEA,IAAAf,EAGA,OADArE,KAAAkC,IAAA6B,MAAA,aAAAvC,OAAAxB,KAAAuB,KAAA,QAAAC,OAAAxB,KAAA4B,KAAA,MAAAJ,OAAAxB,KAAAqB,QAAAsB,eAAA,sBAAAnB,OAAA4D,EAAA,YAAA5D,OAAAuD,EAAA,kCACA,EAGA,IAAAM,EAAA,iBAAAL,EAAAA,EACA,iBAAAX,EAAAiB,0BAAAjB,EAAAiB,0BACA,iBAAAtF,KAAAqB,QAAAoB,2BAAAzC,KAAAqB,QAAAoB,0BAEA,IAAA4C,EAGA,OADArF,KAAAkC,IAAA6B,MAAA,aAAAvC,OAAAxB,KAAAuB,KAAA,QAAAC,OAAAxB,KAAA4B,KAAA,MAAAJ,OAAAxB,KAAAqB,QAAAsB,eAAA,sBAAAnB,OAAA4D,EAAA,YAAA5D,OAAAuD,EAAA,6DACA,EAGA,IAAAQ,EAAA,iBAAAJ,EAAAA,EACA,iBAAAd,EAAAmB,cAAAnB,EAAAmB,cACA,iBAAAxF,KAAAqB,QAAAqB,8BAAA1C,KAAAqB,QAAAqB,6BAEA+C,EAAA,iBAAAF,EAAAvF,KAAAoB,MAAAsE,aAAAC,iBAAAJ,QAAApG,EAGAa,KAAA8E,eAAAT,EAAAgB,EAAAI,GAGA,IAAAG,EAAA5F,KAAAoB,MAAAyE,oBAAAxB,EAAAyB,aAAAL,GAGAzF,KAAAoB,MAAA2E,kBAAAC,cAAAX,EAAAO,GAGA5F,KAAAiG,cAAA5B,EAAAgB,EAAAI,EAAAG,EACA,CAEAM,YAAAnB,EAAAC,EAAAG,EAAAX,GAEA,IAAAY,EAAA,iBAAAL,GAAAA,EACA,IAAAK,EAGA,OADApF,KAAAkC,IAAA6B,MAAA,aAAAvC,OAAAxB,KAAAuB,KAAA,QAAAC,OAAAxB,KAAA4B,KAAA,MAAAJ,OAAAxB,KAAAqB,QAAAsB,eAAA,qCAAAnB,OAAA4D,EAAA,YAAA5D,OAAAuD,EAAA,0CACAP,EAAA5D,MAAA,aAAAY,OAAAxB,KAAAuB,KAAA,QAAAC,OAAAxB,KAAA4B,KAAA,MAAAJ,OAAAxB,KAAAqB,QAAAsB,eAAA,qCAAAnB,OAAA4D,EAAA,YAAA5D,OAAAuD,EAAA,2CAGA,IAAAV,EAAArE,KAAAoE,YAAAgB,GAEA,IAAAf,EAGA,OADArE,KAAAkC,IAAA6B,MAAA,aAAAvC,OAAAxB,KAAAuB,KAAA,QAAAC,OAAAxB,KAAA4B,KAAA,MAAAJ,OAAAxB,KAAAqB,QAAAsB,eAAA,sBAAAnB,OAAA4D,EAAA,YAAA5D,OAAAuD,EAAA,iCACAP,EAAA5D,MAAA,aAAAY,OAAAxB,KAAAuB,KAAA,QAAAC,OAAAxB,KAAA4B,KAAA,MAAAJ,OAAAxB,KAAAqB,QAAAsB,eAAA,sBAAAnB,OAAA4D,EAAA,YAAA5D,OAAAuD,EAAA,kCAGA,IAAAM,EAAA,iBAAAL,EAAAA,EACA,iBAAAX,EAAAiB,0BAAAjB,EAAAiB,0BACA,iBAAAtF,KAAAqB,QAAAoB,2BAAAzC,KAAAqB,QAAAoB,0BAEA,IAAA4C,EAGA,OADArF,KAAAkC,IAAA6B,MAAA,aAAAvC,OAAAxB,KAAAuB,KAAA,QAAAC,OAAAxB,KAAA4B,KAAA,MAAAJ,OAAAxB,KAAAqB,QAAAsB,eAAA,sBAAAnB,OAAA4D,EAAA,YAAA5D,OAAAuD,EAAA,4DACAP,EAAA5D,MAAA,oBAAAY,OAAA4D,KAGA,IAAAG,EAAA,iBAAAJ,EAAAA,EACA,iBAAAd,EAAAmB,cAAAnB,EAAAmB,cACA,iBAAAxF,KAAAqB,QAAAqB,8BAAA1C,KAAAqB,QAAAqB,6BAEA+C,EAAA,iBAAAF,EAAAvF,KAAAoB,MAAAsE,aAAAC,iBAAAJ,QAAApG,EAIAa,KAAA8E,eAAAT,EAAAgB,EAAAI,GAGAzF,KAAAoB,MAAAyE,oBAAAxB,EAAAyB,aAAAL,GACA,CAAAU,EAAAC,IAEAD,GAEAnG,KAAAkC,IAAA6B,MAAA,aAAAvC,OAAAxB,KAAAuB,KAAA,QAAAC,OAAAxB,KAAA4B,KAAA,MAAAJ,OAAAxB,KAAAqB,QAAAsB,eAAA,uCAAAnB,OAAA4D,EAAA,YAAA5D,OAAAuD,EAAA,4CAAAoB,GACA3B,EAAA2B,KAIAnG,KAAAoB,MAAA2E,kBAAAC,cAAAX,EAAAe,GAGApG,KAAAiG,cAAA5B,EAAAgB,EAAAI,EAAAW,GAEA5B,EAAA,KAAA4B,KAEA,CAGAH,gBAEA,OAAA,CACA,EJsFA,EAAE,CAAC,4BAA4B,KAAK,CAAC,EAAE,CAAC,GClUxC,CDkU4C,EAC5C","file":"pict-view.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.PictView = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/**\n* Fable Core Pre-initialization Service Base\n*\n* For a couple services, we need to be able to instantiate them before the Fable object is fully initialized.\n* This is a base class for those services.\n*\n* @author <steven@velozo.com>\n*/\n\nclass FableCoreServiceProviderBase\n{\n\tconstructor(pOptions, pServiceHash)\n\t{\n\t\tthis.fable = false;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions : {};\n\n\t\tthis.serviceType = 'Unknown';\n\n\t\t// The hash will be a non-standard UUID ... the UUID service uses this base class!\n\t\tthis.UUID = `CORESVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`;\n\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\t}\n\n\n\tstatic isFableService = true;\n\n\t// After fable is initialized, it would be expected to be wired in as a normal service.\n\tconnectFable(pFable)\n\t{\n\t\tthis.fable = pFable;\n\n\t\treturn true;\n\t}\n}\n\nmodule.exports = FableCoreServiceProviderBase;\n\n},{}],2:[function(require,module,exports){\n/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tthis.fable = pFable;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t: ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t: {};\n\n\t\tthis.serviceType = 'Unknown';\n\n\t\tif (typeof(pFable.getUUID) == 'function')\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.UUID = `NoFABLESVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\n\t\t// Pull back a few things\n\t\tthis.log = this.fable.log;\n\t\tthis.servicesMap = this.fable.servicesMap;\n\t\tthis.services = this.fable.services;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\nmodule.exports.CoreServiceProviderBase = require('./Fable-ServiceProviderBase-Preinit.js');\n},{\"./Fable-ServiceProviderBase-Preinit.js\":1}],3:[function(require,module,exports){\nconst libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: 'DEFAULT',\n\n\t\tInitializeOnLoad: true,\n\t\tRenderOnLoad: true,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\nclass PictView extends libFableServiceBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\tthis.serviceType = 'PictView';\n\t\t// Convenience and consistency naming\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.fable.AppData;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!tmpTemplate.hasOwnProperty('Hash') || !tmpTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.fable.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!tmpDefaultTemplate.hasOwnProperty('Postfix') || !tmpDefaultTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.fable.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\n\t\t\tif (!tmpRenderable.hasOwnProperty('RenderableHash') || !tmpRenderable.hasOwnProperty('TemplateHash'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable ${i} in the options array.`, tmpRenderable);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t\t}\n\t\t}\n\t}\n\n\tonBeforeInitialize(fCallback)\n\t{\n\t\treturn true;\n\t}\n\n\t// Used for controls and the like to initialize their state\n\tinitialize(fCallback)\n\t{\n\t\treturn true;\n\t}\n\n\tonAfterInitialize(fCallback)\n\t{\n\t\treturn true;\n\t}\n\n\tinitialize()\n\t{\n\n\t\tthis.onBeforeInitialize();\n\t\t// Potentially do something with the return values of these?\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\tthis.internalInitialize();\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\tthis.onAfterInitialRender();\n\t}\n\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pData)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t}\n\n\trender(pRenderable, pRenderDestinationAddress, pTemplateDataAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t(typeof (tmpRenderable.RecordAddress) === 'string') ? tmpRenderable.RecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\tlet tmpData = (typeof (tmpDataAddress) === 'string') ? this.fable.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.fable.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData)\n\n\t\t// Assign the content to the destination address\n\t\tthis.fable.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData, tmpContent)\n\t}\n\n\trenderAsync(pRenderable, pRenderDestinationAddress, pTemplateDataAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn fCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t(typeof (tmpRenderable.RecordAddress) === 'string') ? tmpRenderable.RecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\tlet tmpData = (typeof (tmpDataAddress) === 'string') ? this.fable.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\n\t\t// Render the template (asynchronously)\n\t\tthis.fable.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData,\n\t\t\t(pError, pContent) =>\n\t\t\t{\n\t\t\t\tif (pError)\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderable}) because it did not parse the template.`, pError);\n\t\t\t\t\treturn fCallback(pError);\n\t\t\t\t}\n\n\t\t\t\t// Assign the content to the destination address\n\t\t\t\tthis.fable.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\n\t\t\t\t// Execute the developer-overridable post-render behavior\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData, pContent)\n\n\t\t\t\treturn fCallback(null, pContent);\n\t\t\t});\n\t}\n\n\n\tonAfterRender()\n\t{\n\t\treturn true;\n\t}\n}\n\nmodule.exports = PictView;\n},{\"fable-serviceproviderbase\":2}]},{},[3])(3)\n});\n\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n* Fable Core Pre-initialization Service Base\n*\n* For a couple services, we need to be able to instantiate them before the Fable object is fully initialized.\n* This is a base class for those services.\n*\n* @author <steven@velozo.com>\n*/\n\nclass FableCoreServiceProviderBase\n{\n\tconstructor(pOptions, pServiceHash)\n\t{\n\t\tthis.fable = false;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions : {};\n\n\t\tthis.serviceType = 'Unknown';\n\n\t\t// The hash will be a non-standard UUID ... the UUID service uses this base class!\n\t\tthis.UUID = `CORESVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`;\n\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\t}\n\n\n\tstatic isFableService = true;\n\n\t// After fable is initialized, it would be expected to be wired in as a normal service.\n\tconnectFable(pFable)\n\t{\n\t\tthis.fable = pFable;\n\n\t\treturn true;\n\t}\n}\n\nmodule.exports = FableCoreServiceProviderBase;\n","/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tthis.fable = pFable;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t: ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t: {};\n\n\t\tthis.serviceType = 'Unknown';\n\n\t\tif (typeof(pFable.getUUID) == 'function')\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.UUID = `NoFABLESVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\n\t\t// Pull back a few things\n\t\tthis.log = this.fable.log;\n\t\tthis.servicesMap = this.fable.servicesMap;\n\t\tthis.services = this.fable.services;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\nmodule.exports.CoreServiceProviderBase = require('./Fable-ServiceProviderBase-Preinit.js');","const libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: 'DEFAULT',\n\n\t\tInitializeOnLoad: true,\n\t\tRenderOnLoad: true,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\nclass PictView extends libFableServiceBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\tthis.serviceType = 'PictView';\n\t\t// Convenience and consistency naming\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.fable.AppData;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!tmpTemplate.hasOwnProperty('Hash') || !tmpTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.fable.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!tmpDefaultTemplate.hasOwnProperty('Postfix') || !tmpDefaultTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.fable.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\n\t\t\tif (!tmpRenderable.hasOwnProperty('RenderableHash') || !tmpRenderable.hasOwnProperty('TemplateHash'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable ${i} in the options array.`, tmpRenderable);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t\t}\n\t\t}\n\t}\n\n\tonBeforeInitialize(fCallback)\n\t{\n\t\treturn true;\n\t}\n\n\t// Used for controls and the like to initialize their state\n\tinitialize(fCallback)\n\t{\n\t\treturn true;\n\t}\n\n\tonAfterInitialize(fCallback)\n\t{\n\t\treturn true;\n\t}\n\n\tinitialize()\n\t{\n\n\t\tthis.onBeforeInitialize();\n\t\t// Potentially do something with the return values of these?\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\tthis.internalInitialize();\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\tthis.onAfterInitialRender();\n\t}\n\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pData)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t}\n\n\trender(pRenderable, pRenderDestinationAddress, pTemplateDataAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t(typeof (tmpRenderable.RecordAddress) === 'string') ? tmpRenderable.RecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\tlet tmpData = (typeof (tmpDataAddress) === 'string') ? this.fable.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.fable.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData)\n\n\t\t// Assign the content to the destination address\n\t\tthis.fable.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData, tmpContent)\n\t}\n\n\trenderAsync(pRenderable, pRenderDestinationAddress, pTemplateDataAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn fCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t(typeof (tmpRenderable.RecordAddress) === 'string') ? tmpRenderable.RecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\tlet tmpData = (typeof (tmpDataAddress) === 'string') ? this.fable.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\n\t\t// Render the template (asynchronously)\n\t\tthis.fable.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData,\n\t\t\t(pError, pContent) =>\n\t\t\t{\n\t\t\t\tif (pError)\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderable}) because it did not parse the template.`, pError);\n\t\t\t\t\treturn fCallback(pError);\n\t\t\t\t}\n\n\t\t\t\t// Assign the content to the destination address\n\t\t\t\tthis.fable.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\n\t\t\t\t// Execute the developer-overridable post-render behavior\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData, pContent)\n\n\t\t\t\treturn fCallback(null, pContent);\n\t\t\t});\n\t}\n\n\n\tonAfterRender()\n\t{\n\t\treturn true;\n\t}\n}\n\nmodule.exports = PictView;"]}